trigger:
  branches:
    include:
    - $(BRANCH)

pool:
  name: Azure Pipelines

steps:
  - task: Bash@3
    displayName: 'Carregando as variáveis'
    inputs:
      targetType: 'inline'
      script: |
        echo Iniciando o processo no Shell
        sudo apt-get update
        sudo apt-get install -y jq gettext-base
        source ./azure-settings-portal.sh

        echo "##vso[task.setvariable variable=image]$IMAGE_NAME"
        echo "##vso[task.setvariable variable=version]$VERSION_NUMBER"
    
        export IMAGE_VERSION_NAME="$IMAGE_NAME:$VERSION_NUMBER"
        export AWS_ECR_IMAGE="$AWS_ECR_ENDPOINT/$IMAGE_VERSION_NAME"
        envsubst "\$TASK_FAMILY,\$TASK_ROLE,\$AWS_ECR_IMAGE,\$CONTAINER_NAME,\$TASK_MEMORY,\$TASK_CPU" < "portal-task-definition.json" > "/home/vsts/temp-portal-task.json"
        env | sort

        cat /home/vsts/temp-portal-task.json
    
  - task: Docker@2
    displayName: "Build - version $(version)"
    inputs:
      command: 'build'
      Dockerfile: '$(DOCKER_FILE)'
      repository: '$(image)'
      tags: '$(version)'

  - task: ECRPushImage@1
    displayName: 'Publicando a imagem - version $(version)'
    inputs:
      awsCredentials: $(AWS_CREDENTIALS)
      regionName: 'us-east-1'
      imageSource: 'imagename'
      sourceImageName: '$(image)'
      sourceImageTag: '$(version)'
      repositoryName: '$(REPOSITORY_NAME)'
      pushTag: '$(version)'
      autoCreateRepository: true

  - task: AWSCLI@1
    displayName: 'Registrando a task-definition'
    inputs:
      awsCredentials: $(AWS_CREDENTIALS)
      regionName: 'us-east-1'
      awsCommand: 'ecs'
      awsSubCommand: 'register-task-definition'
      awsArguments: '--cli-input-json file:///home/vsts/temp-portal-task.json'
      failOnStandardError: false

  - task: AWSCLI@1
    displayName: 'Atualizando o serviço $(SERVICE_NAME)'
    inputs:
      awsCredentials: $(AWS_CREDENTIALS)
      regionName: 'us-east-1'
      awsCommand: ecs
      awsSubCommand: 'update-service'
      awsArguments: '--cluster $(CLUSTER_NAME) --service $(SERVICE_NAME) --task-definition $(TASK_FAMILY) --force-new-deployment'
      failOnStandardError: false