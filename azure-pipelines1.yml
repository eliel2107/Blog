pool:
  name: Azure Pipelines

steps:
- task: Bash@3
  displayName: 'Carregando as variáveis'
  inputs:
    targetType: 'inline'
    script: |
      echo Iniciando o processo no Shell
      sudo apt-get update
      sudo apt-get install -y jq
      sudo apt-get install -y gettext-base
      
      envsubst "\$TASK_FAMILY,\$TASK_ROLE,\$GOOGLE_API_KEY,\$SITE_URL,\$GOOGLE_API_URL,\$GOOGLE_RECAPTCHA_KEY,\$AWS_ECR_IMAGE,\$CONTAINER_NAME,\$TASK_MEMORY,\$TASK_CPU" < "portal-task-definition.json" > "/home/vsts/temp-portal-task.json"
      env | sort

      cat /home/vsts/temp-portal-task.json
- task: Docker@0
  displayName: 'Criando o container'
  inputs:
        env: 
          NEXT_PUBLIC_CONTENTFUL_SPACE_ID: $(NEXT_PUBLIC_CONTENTFUL_SPACE_ID)
          NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN: $(NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN)
        inputs:
          command: 'build'
          Dockerfile: '**/Dockerfile'
          repository: '$(IMAGE_NAME)'
          tags: '$(Build.BuildId)'
    
    
- task: ECRPushImage@1
  displayName: 'Publicando a imagem'
  inputs:
    awsCredentials: 'pipeline-aws-dev-deploy'
    regionName: 'us-east-1'
    imageSource: 'imagename'
    sourceImageName: '$(image)'
    sourceImageTag: '$(Build.BuildId)'
    repositoryName: '$(IMAGE_NAME)'
    pushTag: 'latest'
    autoCreateRepository: true

- task: AWSCLI@1
  displayName: 'Registrando a task-definition'
  inputs:
    awsCredentials: 'pipeline-aws-dev-deploy'
    regionName: 'us-east-1'
    awsCommand: 'ecs'
    awsSubCommand: 'register-task-definition'
    awsArguments: '--cli-input-json file:///home/vsts/temp-portal-task.json'
    failOnStandardError: false

- task: AWSCLI@1
  displayName: 'Atualizando o serviço'
  inputs:
    awsCredentials: 'pipeline-aws-dev-deploy'
    regionName: 'us-east-1'
    awsCommand: ecs
    awsSubCommand: 'update-service'
    awsArguments: '--cluster $(CLUSTER_NAME) --service $(SERVICE_NAME) --task-definition $(TASK_FAMILY) --force-new-deployment'
    failOnStandardError: false
